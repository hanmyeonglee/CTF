from Crypto.Util.number import getPrime, bytes_to_long, long_to_bytes
from hashlib import sha256

SHA256_DER_PREFIX = bytes.fromhex(
    "3031300d060960864801650304020105000420"
)

def emsa_pkcs1_v1_5_encode(hash_bytes: bytes, em_len: int) -> bytes:
    """
    EMSA-PKCS1-v1_5 encoding.
    hash_bytes: 해시 결과 (SHA256 등)
    em_len: modulus 길이 (바이트)
    """
    t = SHA256_DER_PREFIX + hash_bytes
    if em_len < len(t) + 11:
        raise ValueError("Encoding error: intended encoded message length too short")

    ps = b'\xff' * (em_len - len(t) - 3)
    return b'\x00\x01' + ps + b'\x00' + t

def crt_rsa(hash_bytes: bytes):
    h = bytes_to_long(hash_bytes)
    dp = d % (p - 1)
    dq = d % (q - 1)
    u = pow(q, -1, p)
    sp = pow(h, dp, p)
    sq = pow(h, dq, q)

    t = sp - sq
    if t < 0: t += p

    S = sq + (t * u % p) * q
    return long_to_bytes(S % n)

n, e, d, p, q, u = [21678139215257036970893844148452326223639441119806922402389788738037585093229800930916458090672927356951350665857966752886513541112675974495280593505121917420051642486524426924948901342135544098651650390971214283055208543691145078962025310103955056262279246645917389084478178625064068374087805713946983313166206250261033575821892329693833838533141638828797455213002323246831297401516973605315155457678989918266050787718280341004104303805271079161168725883957394776191971289663943653571440396180760413066978864317878646206217492821068822182003957145905857601379085447407692136093596780644315382706884790681801866982609, 65537, 10103586711781530956191959801554485321285178281039755325709081846946885525317061651202270662062721304272075409137305559713117111147698058210756454042967315678097523837693037832408627057929569472104531199051157976042866548164335054044205000185014681684106986721997446474287592750699329668530937112356540661010616507056391282674829479128722917279353903395938382933561850955721039171643537080804474923804393115208521840754056421933426652848860030659330377031340403075175856501736611235349350079424145896635488254698092356493073816802426806996790560949900419179825937957995953575702644682796666418948160038245580374970533, 149765842633848941855351804627422651312549028021307166040955045914042656312639346174156151010490248720046729126299293674626718170580387710714955079417933487273144188391248421831631637475277579260686856133667795105859341545696260633149384253345262718009794978603734980288056799148748788466386313507724535922807, 144746885097533635306266687402067224536021643643595998611621070942144442634274031127155041441178943030342055727401059630967762496509652677478327376713106849966458217517177453671700847256137617639980214170497354047269962315456187341990503716799463052030200733882339559117891444044424767473251319652368343191287, 1725044843392138116990590101483522158840994940526665945936935799249869824994978576810140613338040809737724157818453809036414953366295776007675436970565896981992821973226597385795396232990442113534753329593383369418689341166784510813605069169660070925511993773176681863438987207313547120750876471873607264040]

msg = 'aeec244e31223efb8aacc02f83376f9d15257fbbc79f7fbb3146eb4b0bd540ce2fbbe5577e32651838202b2faa3c41dbd452578db921192b444f574e4752440103001d2073672971edce6bb8ad01cee12b6e01334859c0539d557b72e310ce109ebce330'
msg = bytes.fromhex(msg)

signature = '98a6997c46276bd33ae0331a30d7ed273dd19bbd4b82b4dc2ad1b576bf6ccdfb19a5cafd605699fa542b8835675991e4176d27fd08228a2f5e633a403a568ed14e77f499675df6a493db708dff6a18d68c255741d2d1bb8bcb2700d5b7288d9e395f4a8f8b2b612144670882b803f518c24d28bf54096c21619c8105bb26ba8a8b8e61927c1940a48f97dd82275dd9f6182c2feb363c16b119dd0cee717946add70fa765162b09bbd7f8947e44b07c104d3ff8073aa0a7a111cf7c8f71f1462201ff2eda82fc41b91bc5d2377353e0b0e8d686f9258f814cd200e069ced466077250d5df313a5e227db1a3174e9cbd3667f4ed2d7276dc04b86fc9e9400b0f10'
signature = bytes.fromhex(signature)

k = (n.bit_length() + 7) // 8
h = emsa_pkcs1_v1_5_encode(sha256(msg).digest(), k)

randn = 1
d_p = d ^ randn

sig_p = pow(bytes_to_long(h), d_p, n)

print(signature.hex())
print(long_to_bytes(sig_p).hex())
print(crt_rsa(h).hex())