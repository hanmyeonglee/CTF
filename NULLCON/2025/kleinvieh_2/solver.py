from Crypto.PublicKey import RSA
from Crypto.Util.number import long_to_bytes, bytes_to_long
from output import enc1, enc2, enc3, enc4, enc5
from gmpy2 import iroot
#from sage.all import *

import math

# pubkey.pem 파일 읽기
with open("./kleinvieh_2/pubkey.pem", "rb") as f:
    key = RSA.import_key(f.read())

# 공개 키에서 (e, n) 추출
e = key.e
n = key.n

dec1 = long_to_bytes(int(iroot(enc1, e)[0])).decode()

r = 688234005348009046360676388021599552323079007705479727954148955984833460337936950913921276804334830417982234720038650432729780498514155995618937412575604196815690605161835755609341381092145548153312943119696398326144902639226831471200542337105282064399184931676924592908530791494346900227871404063095592748764296028255530577278656680463782655139421219302422899667665339277824718421901831817043159552132252016945226370677278067424506514993298100924479619565269428391036310378044733517453768164252655931111202089432697078947184486267865943138659836155939343134738408972426979329158506027280653209318479413895259774319848662706808171929571545923310500352950348748809789292920278241362015278963315481777028997344480172010960294002098578989469089294022590134823913936869548907125294447477430739096767474026401347928008150737871869441842515706902681140123776591020038755234642184699856517326004574393922162918839396336541620212296870832659576195010466896701249003808553560895239860454162846759635434691728716499056221797005696650174933343585361153344017021747827389193405667073333443569659567562247406283282451284155149780737904760989910944550499316655128394899229284796584787198689342431338201610314893908441661953172106881929330452489260
enc2 = enc2 * pow(r, -3, n) % n
dec2 = long_to_bytes(int(iroot(enc2, e)[0])).decode()

bytelength = int(math.floor(math.log2(n))) // 8
length = bytelength - len(dec2)
r = 256 ** length
enc3 = enc3 * pow(r, -3, n) % n
dec3 = long_to_bytes(int(iroot(enc3, e)[0])).decode()

length = bytelength // len(dec3)
r = sum((256 ** len(dec3)) ** L for L in range(length))
enc4 = enc4 * pow(r, -3, n) % n
dec4 = long_to_bytes(int(iroot(enc4, e)[0])).decode()

temp_msg = bytes_to_long(b'\x42' * (bytelength - length) + b'\x00' * length)
print(temp_msg < int(iroot(n, e)[0]))