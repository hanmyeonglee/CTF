<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Edit Slides</title>
  <link rel="stylesheet" href="/style.css">
  <style>
    .section {
      margin: 20px auto;
      padding: 10px;
      background: #fafafa;
      border: 1px solid #ddd;
      border-radius: 4px;
      width: 65%;
    }
    .section h2 {
      margin-top: 0;
    }
    label {
      display: block;
      margin-top: 10px;
      font-weight: bold;
    }
    input[type="text"] {
      width: 100%;
      padding: 8px;
      margin-top: 5px;
      box-sizing: border-box;
      border: 1px solid #ccc;
      border-radius: 4px;
    }
    button {
      margin-top: 10px;
      padding: 8px 12px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
    .response-msg {
      margin-top: 5px;
      font-weight: bold;
    }
    .editor-container {
      display: flex;
      gap: 20px;
      margin-top: 20px;
    }
    .editor, .preview {
      width: 50%;
    }
    textarea {
      width: 100%;
      height: 500px;
      padding: 10px;
      box-sizing: border-box;
      border: 1px solid #ccc;
      border-radius: 4px;
    }
    iframe {
      width: 100%;
      height: 500px;
      border: none;
    }
  </style>
</head>
<body>
  <%
    var themeLink;
    var theme = config.theme;
    if(!config.theme.includes("/")) {
      themeLink = "/dist/theme/"+config.theme+".css";
    } else {
      theme = config.theme.split('/').pop();
      themeLink = "/view/" + userId + "/style/" + config.theme.split('/').pop();
    }
    var highlightLink;
    var highlightTheme = config.highlightTheme;
    if(!config.highlightTheme.includes("/")) {
      highlightLink = "/plugin/highlight/"+config.highlightTheme+".css";
    } else {
      highlightTheme = config.highlightTheme.split('/').pop();
      highlightLink = "/view/" + userId + "/highlight/" + config.highlightTheme.split('/').pop();
    }
  %>
  <div class="container">
    <h1>Edit Slides</h1>
    <div class="editor-container">
        <div class="editor">
          <h2>Markdown Editor</h2>
          <form id="editorForm" action="/edit" method="POST">
            <textarea id="markdown" name="markdown"><%= data %></textarea>
            <button type="submit">Save Slides</button>
          </form>
        </div>
        <div class="preview">
          <h2>Preview</h2>
          <iframe id="previewFrame" sandbox="allow-same-origin allow-scripts" width="600"></iframe>
        </div>
      </div>
    </div>
    <div class="section">
      <h2>Current Configuration</h2>
      <p>Title: <%= config.title %></p>
      <p>Theme: <%= theme %></p>
      <p>Highlight Theme: <%= highlightTheme %></p>
    </div>

    <div class="section" id="themeSection">
      <h2>Theme Management</h2>
      <form id="themeForm">
        <label for="themeUrl">Add Theme URL:</label>
        <input type="text" id="themeUrl" name="url" placeholder="https://example.com/theme.css" required>
        <button type="submit">Add Theme</button>
      </form>
      <button id="deleteThemeBtn">Delete Theme</button>
      <div id="themeResponse" class="response-msg"></div>
    </div>

    <div class="section" id="highlightSection">
      <h2>Highlight Management</h2>
      <form id="highlightForm">
        <label for="highlightUrl">Add Highlight URL:</label>
        <input type="text" id="highlightUrl" name="url" placeholder="https://example.com/highlight.css" required>
        <button type="submit">Add Highlight</button>
      </form>
      <button id="deleteHighlightBtn">Delete Highlight</button>
      <div id="highlightResponse" class="response-msg"></div>
    </div>

  <script>
    function updatePreview() {
      const markdownContent = document.getElementById('markdown').value;
      const title = "<%= config.title %>" || "Presentation";
      
      const themeLink = "<%= themeLink %>";
      const highlightLink = "<%= highlightLink %>";
      
      const previewHTML = `<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${title}</title>
    <base href="${location.origin}"
    <link rel="shortcut icon" href="/favicon.ico" />
    <link rel="stylesheet" href="/dist/reset.css" />
    <link rel="stylesheet" href="/dist/reveal.css" />
    <link rel="stylesheet" href="${themeLink}?preview=1" id="theme" />
    <link rel="stylesheet" href="${highlightLink}?preview=1" />
  </head>
  <body>
    <div class="reveal">
      <div class="slides">
        <section data-markdown>
          <textarea data-template>
${markdownContent}
          </textarea>
        </section>
      </div>
    </div>
    <script src="/dist/reveal.js"><\x2fscript>
    <script src="/plugin/markdown/markdown.js"><\x2fscript>
    <script src="/plugin/highlight/highlight.js"><\x2fscript>
    <script src="/plugin/zoom/zoom.js"><\x2fscript>
    <script src="/plugin/notes/notes.js"><\x2fscript>
    <script src="/plugin/math/math.js"><\x2fscript>
    <script>
      Reveal.initialize({
        controls: true,
        progress: true,
        history: true,
        center: true,
        transition: 'default',
        slideNumber: true,
        plugins: [ RevealMarkdown, RevealHighlight, RevealZoom, RevealNotes, RevealMath ]
      });
       Reveal.addEventListener('ready', function (event) {
        const blocks = Reveal.getRevealElement().querySelectorAll('pre code:not(.mermaid)');
        const hlp = Reveal.getPlugin('highlight');
        blocks.forEach(hlp.highlightBlock);
      });
    <\x2fscript>
  </body>
</html>`;
      
      const iframe = document.getElementById("previewFrame");
      const blob = new Blob([previewHTML], { type: 'text/html' });
      const blobUrl = URL.createObjectURL(blob);
      iframe.src = blobUrl;
    }

    var debounceTimer;
    document.getElementById('markdown').addEventListener('input', function() {
      clearTimeout(debounceTimer);
      debounceTimer = setTimeout(updatePreview, 300);
    });
    updatePreview();

    document.getElementById('themeForm').addEventListener('submit', function(e) {
      e.preventDefault();
      fetch('/edit/add/theme', {
        method: 'POST',
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          "url": this.themeUrl.value
        })
      })
      .then(response => response.json())
      .then(data => {
        document.getElementById('themeResponse').textContent =
          data.status === "success" ? "Theme added successfully." : "Error adding theme.";
      })
      .catch(() => {
        document.getElementById('themeResponse').textContent = "Network error.";
      });
    });

    document.getElementById('deleteThemeBtn').addEventListener('click', function() {
      fetch('/edit/del/theme', {
        method: 'DELETE'
      })
      .then(response => response.json())
      .then(data => {
        document.getElementById('themeResponse').textContent =
          data.status === "success" ? "Theme deleted successfully." : "Error deleting theme.";
      })
      .catch(() => {
        document.getElementById('themeResponse').textContent = "Network error.";
      });
    });

    document.getElementById('highlightForm').addEventListener('submit', function(e) {
      e.preventDefault();
      fetch('/edit/add/highlight', {
        method: 'POST',
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          "url": this.highlightUrl.value
        })
      })
      .then(response => response.json())
      .then(data => {
        document.getElementById('highlightResponse').textContent =
          data.status === "success" ? "Highlight added successfully." : "Error adding highlight.";
      })
      .catch(() => {
        document.getElementById('highlightResponse').textContent = "Network error.";
      });
    });

    document.getElementById('deleteHighlightBtn').addEventListener('click', function() {
      fetch('/edit/del/highlight', {
        method: 'DELETE'
      })
      .then(response => response.json())
      .then(data => {
        document.getElementById('highlightResponse').textContent =
          data.status === "success" ? "Highlight deleted successfully." : "Error deleting highlight.";
      })
      .catch(() => {
        document.getElementById('highlightResponse').textContent = "Network error.";
      });
    });
  </script>
</body>
</html>